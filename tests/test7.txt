interface D {
    float function myFunc();
}


class X {
    public declare int myVar;
}


public class C inherits X implements D {
    public declare int num = 2;
    protected declare int[] arr = [];

    public static declare float myStatic = 1.0;

    constructor(){
        this->num = 4;
        super->myVar = 5;
        declare int abc = 0;
    }

    constructor(int a){
        declare int abc = 0;
    }



    public X function myFunc() {
        declare int xyz = 2;
        declare X x;
        return x;
    }
    public float function myFunc(int a) {
        declare int xyz = 2;
        return 0.5;
    }
    public float function myFunc(float a) {
        declare int xyz = 2;
        return 0.5;
    }
}


public class A inherits C{
    constructor(int foo){
    }
    mainEntry(){
        declare float a = C.myStatic;
        C.myStatic = 2.0;
        declare float b = a + 2;
        declare C* c;
        declare float D = c->num + b + c->myFunc().myVar + c->arr[0];
        a+=2;
        declare string text = "Hello";
        text += "World";
        *c = makeObj C(1);
        declare C* obj4;
        declare C c2;
        obj4 = c;
        //declare int a,b;
        declare int[][] arr2 = [[1,1], [2,2], [3,3]]; 
        declare C obj12=makeObj A();
        declare float myval = a+obj12.myFunc().myVar*55.0;
        declare float[2][2] arr3 = [[1.0/0.0,1.0], [2.0,2.0], [3.0,3.0]];
        declare C[] arr4 = [makeObj C()];
        while (!(a<b)){
            declare float y;
        }
         for (declare int i=0;i<7;i+=1)
        {   
            declare int j=2;
            
        }
    }
}